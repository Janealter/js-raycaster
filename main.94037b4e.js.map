{"version":3,"sources":["map.json","renderer.ts","helpers/index.ts","init.ts","main.ts"],"names":["module","exports"],"mappingsgG5iB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,WAAA,QAAA,aAAA,QAAA,WAAA,QAAA,aAAA,QAAA,eAAA,EAhGD,IAAM,EAAa,IAkGyC,QAAA,WAAA,EAjG5D,IAAM,EAAa,GAiGqD,QAAA,WAAA,EAhGxE,IAAM,EAAa,UACb,EAAiB,EAAa,EAEpC,SAAS,EAAW,EAA+B,GAG5C,IAFC,IAAA,EAAc,IAAI,MAAmB,EAAb,GAAgB,UAAK,GAE1C,EAAI,EAAG,EAAI,EAAO,OAAQ,IAG5B,IAFC,IAAA,EAAM,EAAO,GAEV,EAAI,EAAG,EAAI,EAAI,OAAQ,IAAK,CAE/B,GADU,EAAI,GASlB,EAAc,EAPa,CACzB,EAAG,EAAiB,EACpB,EAAG,EAAiB,EACpB,MAAO,EACP,OAAQ,EACR,KAAM,IAGR,EAAY,EAAK,EAAI,GAAe,CAAE,EAAG,EAAG,EAAG,GAI5C,OAAA,EAGT,SAAS,EAAc,EAAqD,GAApB,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAIzD,EAAc,EAAK,CACjB,EAAI,EAAI,EAAmB,EAC3B,EAAI,EAAI,EAAmB,EAC3B,MANY,GAOZ,OANa,GAOb,KAAM,YAIV,SAAS,EAAc,EAA+B,EAAiC,GACrF,EAAc,EAAK,CAAE,EAAG,EAAG,EAAG,EAAG,MAAO,EAAY,OAAQ,EAAY,KAAM,YAEzE,IAAA,IAAI,EAAI,EAAG,EAAI,EAAmB,OAAQ,IAAK,CACtB,IAAA,EAAA,EAAmB,GAAvC,EAAA,EAAA,SAAU,EAAA,EAAA,MACZ,EAAa,GAAc,EAAW,KAAK,IAAI,EAAQ,IACvD,GAAc,EAAa,GAAc,EAG/C,EAAS,EAAK,CAAE,EAAA,EAAG,EAAG,GAAc,CAAE,EAAA,EAAG,EAFxB,EAAa,GAE0B,CAAE,KAAM,KAIpE,SAAS,EAAe,EAAyF,GAAxD,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,MAAO,EAAA,EAAA,OAAQ,EAAA,EAAA,KAAA,OAAO,IAAA,EAAA,UAA4B,EACzG,EAAY,IAAI,OAEtB,EAAU,KAAK,EAAG,EAAG,EAAO,GAC5B,EAAI,UAAY,EAChB,EAAI,KAAK,GAGX,SAAS,EACP,EAGA,EAAA,EAAA,GAFK,IAAA,EAAH,EAAA,EAAc,EAAH,EAAA,EACR,EAAH,EAAA,EAAY,EAAH,EAAA,EAGX,EACE,EACA,CAAE,EAAG,EAAS,EAAgB,EAAG,EAAS,GAC1C,CAAE,EAAG,EAAO,EAAgB,EAAG,EAAO,GACtC,GAQJ,SAAS,EACP,EAGoD,EAAA,GAF/C,IAAA,EAAH,EAAA,EAAc,EAAH,EAAA,EACR,EAAH,EAAA,EAAY,EAAH,EAAA,EACuC,EAAA,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAhD,EAAA,EAAA,KAAA,OAAO,IAAA,EAAA,UAA2C,EAAhC,EAAA,EAAA,MAAA,OAAQ,IAAA,EAAA,EAAwB,EAE9C,EAAO,IAAI,OAEjB,EAAI,YACJ,EAAK,OAAO,EAAQ,GACpB,EAAK,OAAO,EAAM,GAClB,EAAI,UAAY,EAChB,EAAI,YAAc,EAClB,EAAI,OAAO,GACX,EAAI,YAGG,QAAA,UAAA,EAAW,QAAA,aAAA,EAA0B,QAAA,aAAA,EAAZ,QAAA,WAAA;;AChFkB,aAlBpD,SAAS,EAAkB,EAAe,GACjC,OAAA,OAAU,GAAA,OAAA,KAAK,MAAM,OAAU,GAAA,OAAA,EAAS,KAAA,OAAA,KAAqB,MAAA,OAAA,IAGtE,SAAS,EAAyB,GAckB,IAAA,EAb3C,OAA8B,QAA9B,EAAA,EAAM,WAAW,MAAM,KAAK,UAAE,IAAA,OAAA,EAAA,EAAE,SAAU,EAGnD,SAAS,IAIF,IAHC,IACF,EAAQ,IAEH,EAAI,EAAG,EAAI,EAAG,IACrB,GAJgB,mBAIG,KAAK,MAAsB,GAAhB,KAAK,WAE9B,OAAA,EAG2C,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,QAAA,wBAAA,QAAA,sBAAA,EAA3C,QAAA,iBAAA,EAAkB,QAAA,wBAAA,EAAyB,QAAA,eAAA;;AClBpD,aAAA,SAAwB,IAChB,IAAA,EAAY,SAAS,eAAe,cACpC,EAAa,SAAS,eAAe,eACrC,EAAa,SAAS,eAAe,kBAGxC,KAAC,GAAc,GAAe,GAE3B,aAAqB,mBACrB,aAAsB,mBACtB,aAAsB,mBAGpB,MAAA,IAAI,MAAM,4BAGZ,IAAA,EAAa,EAAU,WAAW,MAClC,EAAc,EAAW,WAAW,MACpC,EAAc,EAAW,WAAW,MAEtC,IAAC,IAAe,IAAgB,EAAa,MAAM,IAAI,MAAM,kCAE1D,MAAA,CAAE,WAAA,EAAY,YAAA,EAAa,YAAA,GAtBpC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC4GC,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA5GD,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,QAAA,cACA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,WAEM,EAAa,EAAA,QACb,EAAM,KAAK,GAAK,EAChB,EAAsB,IACtB,EAAoB,GACpB,EAAa,IACb,EAAoB,CACxB,EAAG,EACH,EAAG,GAED,EAAkB,EAE2B,EAAA,EAAA,UAAzC,EAAA,EAAA,WAAY,EAAA,EAAA,YAAa,EAAA,EAAA,YAE3B,EAAc,EAAA,UAAU,EAAY,GA2C1C,SAAS,IACD,IAAA,EAAY,EAAS,EAAa,GACxC,EAAA,aAAa,EAAa,GAC1B,EAAA,aAAa,EAAa,EAAW,GAOvC,SAAS,EAAU,EAA+B,GAC1C,IAAA,EAAyB,GAE/B,EAAI,UAAU,EAAG,EAAG,EAAA,WAAY,EAAA,YAE3B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAA,WAAY,IAGzB,IAFC,IAAA,EAAY,EAAS,EAAM,EAAO,EAAM,EAAI,EAAA,WAEzC,EAAI,EAAG,EAAI,GAAI,GAAK,IAAK,CAC1B,IAAA,EAAK,EAAkB,EAAK,EAAI,KAAK,IAAI,GACzC,EAAK,EAAkB,EAAK,EAAI,KAAK,IAAI,GAE3C,GAAA,EAAc,EAAa,CAAC,EAAG,EAAI,EAAG,IAAO,CAC/C,EAAA,WAAW,EAAK,CACd,EAAG,EAAkB,EACrB,EAAG,EAAkB,GACpB,CACD,EAAG,EACH,EAAG,GACF,CACD,KAAM,OACN,MAAO,KAET,EAAU,KAAK,CAAE,MAAO,EAAU,SAAU,IAC5C,OAKC,OAAA,EAGT,SAAS,EAAe,EAA2C,GAApB,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAIzC,OAAA,EAHM,KAAK,MAAM,GACX,KAAK,MAAM,GAEK,EAAA,YAxF/B,IAEA,SAAS,iBAAiB,UAAW,SAAC,GAGhC,GAFJ,EAAI,iBAEA,CAAC,YAAa,aAAc,UAAW,aAAa,SAAS,EAAI,KAAM,CACrE,IAAA,EAAW,EACX,EAAO,EACP,EAAO,EAEK,eAAZ,EAAI,MACN,EAAW,EAAA,iBAAiB,EAAkB,EAAqB,EAAA,wBAAwB,IAC3F,EAAkB,EAAW,EAAa,EAAI,GAEhC,cAAZ,EAAI,MACN,EAAW,EAAA,iBAAiB,EAAkB,EAAqB,EAAA,wBAAwB,IAC3F,EAAkB,EAAW,EAAI,EAAa,GAGhC,YAAZ,EAAI,MACN,EAAO,EAAkB,EAAK,EAAoB,KAAK,IAAI,GAC3D,EAAO,EAAkB,EAAK,EAAoB,KAAK,IAAI,GAEtD,EAAc,EAAa,CAAE,EAAG,EAAM,EAAG,MAC5C,EAAkB,EAAI,EACtB,EAAkB,EAAI,IAGV,cAAZ,EAAI,MACN,EAAO,EAAkB,EAAK,EAAoB,KAAK,IAAI,GAC3D,EAAO,EAAkB,EAAK,EAAoB,KAAK,IAAI,GAEtD,EAAc,EAAa,CAAE,EAAG,EAAM,EAAG,MAC5C,EAAkB,EAAI,EACtB,EAAkB,EAAI,IAI1B","file":"main.94037b4e.js","sourceRoot":"../src","sourcesContent":["module.exports=[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];","const MAP_PIXELS = 512;\nconst MAX_BLOCKS = 16;\nconst WALL_COLOR = '#e22b2b';\nconst RECTANGLE_SIZE = MAP_PIXELS / MAX_BLOCKS;\n\nfunction renderMap (ctx: CanvasRenderingContext2D, schema: MapSchema) {\n  const wallsSchema = new Array(MAX_BLOCKS * 2).fill(undefined) as WallsSchema;\n\n  for (let i = 0; i < schema.length; i++) {\n    const row = schema[i];\n\n    for (let n = 0; n < row.length; n++) {\n      const block = row[n];\n      if (!block) continue;\n      const currentBlockParams = {\n        x: RECTANGLE_SIZE * n,\n        y: RECTANGLE_SIZE * i,\n        width: RECTANGLE_SIZE,\n        height: RECTANGLE_SIZE,\n        fill: WALL_COLOR,\n      };\n      drawRectangle(ctx, currentBlockParams);\n      wallsSchema[n + (i * MAX_BLOCKS)] = { x: n, y: i };\n    }\n  }\n\n  return wallsSchema;\n}\n\nfunction renderPlayer (ctx: CanvasRenderingContext2D, { x, y }: TCoordinates) {\n  const WIDTH = 10;\n  const HEIGHT = 10;\n  \n  drawRectangle(ctx, {\n    x: (x * RECTANGLE_SIZE) - (WIDTH / 2),\n    y: (y * RECTANGLE_SIZE) - (HEIGHT / 2),\n    width: WIDTH,\n    height: HEIGHT,\n    fill: '#000000',\n  });\n}\n\nfunction render3DView (ctx: CanvasRenderingContext2D, rayToWallDistances: RayParams[], playerAngle: number) {\n  drawRectangle(ctx, { x: 0, y: 0, width: MAP_PIXELS, height: MAP_PIXELS, fill: '#dcdcdc' });\n\n  for (let x = 0; x < rayToWallDistances.length; x++) {\n    const { distance, angle } = rayToWallDistances[x];\n    const lineHeight = MAP_PIXELS / (distance * Math.cos(angle - playerAngle));\n    const lineBeginY = (MAP_PIXELS - lineHeight) / 2;\n    const lineEndY = lineBeginY + lineHeight;\n\n    drawLine(ctx, { x, y: lineBeginY }, { x, y: lineEndY }, { fill: WALL_COLOR });\n  }\n}\n\nfunction drawRectangle (ctx: CanvasRenderingContext2D, { x, y, width, height, fill = '#ff0000' }: RectangleParams) {\n  const rectangle = new Path2D();\n\n  rectangle.rect(x, y, width, height);\n  ctx.fillStyle = fill;\n  ctx.fill(rectangle);\n}\n\nfunction renderLine (\n  ctx: CanvasRenderingContext2D,\n  { x: beginX, y: beginY }: TCoordinates,\n  { x: endX, y: endY }: TCoordinates,\n  params?: DrawLineParams,\n) {\n  drawLine(\n    ctx,\n    { x: beginX * RECTANGLE_SIZE, y: beginY * RECTANGLE_SIZE },\n    { x: endX * RECTANGLE_SIZE, y: endY * RECTANGLE_SIZE },\n    params,\n  );\n}\n\ntype DrawLineParams = {\n  fill?: string;\n  width?: number;\n};\nfunction drawLine (\n  ctx: CanvasRenderingContext2D,\n  { x: beginX, y: beginY }: TCoordinates,\n  { x: endX, y: endY }: TCoordinates,\n  { fill = '#000000', width = 1 }: DrawLineParams = {},\n) {\n  const line = new Path2D();\n\n  ctx.beginPath();\n  line.moveTo(beginX, beginY);\n  line.lineTo(endX, endY);\n  ctx.lineWidth = width;\n  ctx.strokeStyle = fill;\n  ctx.stroke(line);\n  ctx.beginPath();\n}\n\nexport { renderMap, renderPlayer, renderLine, render3DView, MAP_PIXELS, MAX_BLOCKS };\n","function exponentialRound (value: number, decimalCount: number) {\n  return Number(`${Math.round(Number(`${value}e${decimalCount}`))}e-${decimalCount}`);\n}\n\nfunction getFractionDigitsNumber (value: number) {\n  return value.toString().split('.')[1]?.length || 0;\n}\n\nfunction getRandomColor () {\n  const hexValues = '0123456789ABCDEF';\n  let color = '#';\n\n  for (let i = 0; i < 6; i++) {\n    color += hexValues[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nexport { exponentialRound, getFractionDigitsNumber, getRandomColor };\n","export default function init () {\n  const mapCanvas = document.getElementById('map-canvas');\n  const raysCanvas = document.getElementById('rays-canvas');\n  const viewCanvas = document.getElementById('3d-view-canvas');\n\n  if (\n    (!mapCanvas || !raysCanvas || !viewCanvas) ||\n    (\n      !(mapCanvas instanceof HTMLCanvasElement) ||\n      !(raysCanvas instanceof HTMLCanvasElement) ||\n      !(viewCanvas instanceof HTMLCanvasElement)\n    )\n  ) {\n    throw new Error('Canvas element not found');\n  }\n\n  const mapContext = mapCanvas.getContext('2d');\n  const raysContext = raysCanvas.getContext('2d');\n  const viewContext = viewCanvas.getContext('2d');\n\n  if (!mapContext || !raysContext || !viewContext) throw new Error('Canvas context is on available');\n\n  return { mapContext, raysContext, viewContext };\n}\n","import map from './map.json';\nimport { renderMap, renderPlayer, renderLine, render3DView, MAP_PIXELS, MAX_BLOCKS } from './renderer';\nimport { exponentialRound, getFractionDigitsNumber } from './helpers';\nimport init from './init';\n\nconst MAP_SCHEMA = map as MapSchema;\nconst FOV = Math.PI / 3;\nconst PLAYER_ROTATE_SPEED = 0.05;\nconst PLAYER_WALK_SPEED = 0.2;\nconst MAX_RADIAN = 6.2;\nconst playerCoordinates = {\n  x: 2,\n  y: 2,\n};\nlet playerViewAngle = 0;\n\nconst { mapContext, raysContext, viewContext } = init();\n\nconst wallsSchema = renderMap(mapContext, MAP_SCHEMA);\nrenderAll();\n\ndocument.addEventListener('keydown', (evt) => {\n  evt.preventDefault();\n\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(evt.key)) {\n    let newAngle = 0;\n    let newX = 0;\n    let newY = 0;\n\n    if (evt.key === 'ArrowRight') {\n      newAngle = exponentialRound(playerViewAngle + PLAYER_ROTATE_SPEED, getFractionDigitsNumber(PLAYER_ROTATE_SPEED));\n      playerViewAngle = newAngle > MAX_RADIAN ? 0 : newAngle; \n    }\n    if (evt.key === 'ArrowLeft') {\n      newAngle = exponentialRound(playerViewAngle - PLAYER_ROTATE_SPEED, getFractionDigitsNumber(PLAYER_ROTATE_SPEED));\n      playerViewAngle = newAngle < 0 ? MAX_RADIAN : newAngle;\n    }\n\n    if (evt.key === 'ArrowUp') {\n      newX = playerCoordinates.x + (PLAYER_WALK_SPEED * Math.cos(playerViewAngle));\n      newY = playerCoordinates.y + (PLAYER_WALK_SPEED * Math.sin(playerViewAngle));\n\n      if (!findCollision(wallsSchema, { x: newX, y: newY })) {\n        playerCoordinates.x = newX;\n        playerCoordinates.y = newY;\n      }\n    }\n    if (evt.key === 'ArrowDown') {\n      newX = playerCoordinates.x - (PLAYER_WALK_SPEED * Math.cos(playerViewAngle));\n      newY = playerCoordinates.y - (PLAYER_WALK_SPEED * Math.sin(playerViewAngle));\n\n      if (!findCollision(wallsSchema, { x: newX, y: newY })) {\n        playerCoordinates.x = newX;\n        playerCoordinates.y = newY;\n      }\n    }\n\n    renderAll();\n  }\n});\n\nfunction renderAll () {\n  const rayParams = castRays(raysContext, playerViewAngle);\n  renderPlayer(raysContext, playerCoordinates);\n  render3DView(viewContext, rayParams, playerViewAngle);\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx \n * @param {number} angle Angle in radians (min 0, max 6.2)\n */\nfunction castRays (ctx: CanvasRenderingContext2D, angle: number) {\n  const rayParams: RayParams[] = [];\n\n  ctx.clearRect(0, 0, MAP_PIXELS, MAP_PIXELS);\n\n  for (let i = 0; i < MAP_PIXELS; i++ ) {\n    const rayAngle = (angle - (FOV / 2)) + (FOV * i / MAP_PIXELS);\n  \n    for (let c = 0; c < 20; c += .05) {\n      const cx = playerCoordinates.x + (c * Math.cos(rayAngle));\n      const cy = playerCoordinates.y + (c * Math.sin(rayAngle));\n\n      if (findCollision(wallsSchema, {x: cx, y: cy })) {\n        renderLine(ctx, {\n          x: playerCoordinates.x,\n          y: playerCoordinates.y,\n        }, {\n          x: cx,\n          y: cy,\n        }, {\n          fill: 'gray',\n          width: 0.5,\n        });\n        rayParams.push({ angle: rayAngle, distance: c });\n        break;\n      }\n    }\n  }\n\n  return rayParams;\n}\n\nfunction findCollision (schema: WallsSchema, { x, y }: TCoordinates) {\n  const intX = Math.floor(x);\n  const intY = Math.floor(y);\n\n  return schema[intX + (intY * MAX_BLOCKS)];\n}\n"]}